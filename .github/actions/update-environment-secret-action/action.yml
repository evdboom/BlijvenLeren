name: Update Environment secret

description: Updates a secret in the GitHub repository environment

inputs:
  pat_token:
    description: 'GitHub personal access token'
    required: true
  secret_name:
    description: 'Name of the secret to update'
    required: true
  secret_value:
    description: 'Value of the secret to update'
    required: true
  environment_name:
    description: 'Name of the environment to update the secret in'
    required: true

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v3
      with:
        node-version: 20
    - run: |
        npm install --global sodium-native@4.0.4
        echo "NODE_PATH=$(npm root -g)" >> $GITHUB_ENV
      shell: bash
      
    - name: Update Secret
      uses: actions/github-script@v7
      env:
        SECRET_VALUE: ${{ inputs.secret_value }}
        SECRET_NAME: ${{ inputs.secret_name }}
        GITHUB_ENVIRONMENT: ${{ inputs.environment_name }}
        GITHUB_TOKEN: ${{ inputs.pat_token }}
      with:
        result-encoding: string
        github-token: ${{ inputs.pat_token }}
        script: |
          const sodium = require('sodium-native');
          const { data: {key: publicKey, key_id: keyId} } = await github.rest.actions.getRepoPublicKey({...context.repo});
          if (publicKey) {
            const key = Buffer.from(publicKey, 'base64');
            const message = Buffer.from(process.env.SECRET_VALUE);
            const ciphertext = Buffer.alloc(message.length + sodium.crypto_box_SEALBYTES);

            sodium.crypto_box_seal(ciphertext, message, key);
            const encryptedToken = ciphertext.toString('base64');

            const response = await fetch(`https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/environments/${process.env.GITHUB_ENVIRONMENT}/secrets/${process.env.SECRET_NAME}`, {
              method: 'PUT',
              headers: {
                'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`,
                'Content-Type': 'application/json',
                'Accept': 'application/vnd.github.v3+json'
              },
              body: JSON.stringify({
                encrypted_value: encryptedToken,
                key_id: keyId
              })
            });

            if (!response.ok) {
              throw new Error(`Failed to update secret: ${response.statusText}`);
            }
          } else {
            core.error('Failed to fetch the public key. Unable to update secret');
          }